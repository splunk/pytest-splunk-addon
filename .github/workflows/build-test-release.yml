on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - "**"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  meta:
    runs-on: ubuntu-22.04
    outputs:
      matrix_supportedSplunk: ${{ steps.matrix.outputs.latestSplunk }}
    steps:
      - uses: actions/checkout@v4
      - id: matrix
        uses: splunk/addonfactory-test-matrix-action@v3

  fossa-scan:
    continue-on-error: true
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: run fossa anlyze and create report
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
          fossa analyze --debug
          fossa report attribution --format text > /tmp/THIRDPARTY
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
      - name: upload THIRDPARTY file
        uses: actions/upload-artifact@v4
        with:
          name: THIRDPARTY
          path: /tmp/THIRDPARTY
      - name: run fossa test
        run: |
          fossa test --debug
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
  
  compliance-copyrights:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: apache/skywalking-eyes@v0.6.0
  
  pre-commit:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: pre-commit/action@v3.0.1

  semgrep:
    uses: splunk/sast-scanning/.github/workflows/sast-scan.yml@main
    secrets:
      SEMGREP_KEY: ${{ secrets.SEMGREP_PUBLISH_TOKEN }}

  test-splunk-unit:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
          poetry install
          poetry run pytest -v tests/unit


  test-splunk-external:
    runs-on: ubuntu-22.04
    needs:
      - meta
      - pre-commit
      - fossa-scan
      - compliance-copyrights
      - test-splunk-unit
    strategy:
      fail-fast: false
      matrix:
        splunk: ${{ fromJson(needs.meta.outputs.matrix_supportedSplunk) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup for testing
        run: |
          mkdir test-results-${{ matrix.splunk.version }}
      - name: Test
        run: |
          export SPLUNK_APP_PACKAGE=./tests/e2e/addons/TA_fiction_indextime
          export SPLUNK_ADDON=TA_fiction_indextime
          export SPLUNK_APP_ID=TA_fiction_indextime
          export SPLUNK_VERSION=${{ matrix.splunk.version }}
          export SPLUNK_HEC_TOKEN="9b741d03-43e9-4164-908b-e09102327d22"
          echo $SPLUNK_VERSION
          docker compose -f "docker-compose-ci.yml" build
          SPLUNK_PASSWORD=Chang3d! docker compose -f docker-compose-ci.yml up --abort-on-container-exit
          docker volume ls
      - name: Collect Results
        run: |
          docker volume ls
          docker container create --name dummy \
                              -v pytest-splunk-addon_results:/work/test-results \
                              registry.access.redhat.com/ubi7/ubi
          docker cp dummy:/work/test-results/test.xml test-results-${{ matrix.splunk.version }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: splunk ${{ matrix.splunk.version }} external test artifacts
          path: |
            test-results-${{ matrix.splunk.version }}


  test-splunk-matrix:
    needs:
      - meta
      - pre-commit
      - fossa-scan
      - compliance-copyrights
      - test-splunk-unit
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        splunk: ["9.1.4"]
        test-marker: [
          "splunk_connection_docker",
          "splunk_app_fiction"
        ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: 3.7
      - name: Start Docker Events Listener in Background
        run: |
          docker --version
          docker events --format '{{json .}}' > docker_events_${{ github.run_id }}.jsonl &
          echo $! > docker_events_pid.txt # Store PID to kill later
          echo "Docker events listener started in background."
      - name: Start Resource Monitor in Background
        run: |
          # Define the log file name, including run ID for uniqueness
          LOG_FILE="resource_usage_${{ github.run_id }}.log"
          # Define the sampling interval in seconds
          INTERVAL=5

          # Create the monitoring script inline
          cat << 'EOF' > resource_monitor.sh
          #!/bin/bash
          # Ensure the log file is unique per run
          LOG_FILE_PATH="${{ github.workspace }}/resource_usage_${{ github.run_id }}.log"
          INTERVAL_SECONDS=2

          echo "Starting resource monitoring. Logs will be written to $LOG_FILE_PATH every $INTERVAL_SECONDS seconds."
          while true; do
            TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            echo "--- $TIMESTAMP ---" >> "$LOG_FILE_PATH"

            echo "--- Docker Container Stats ---" >> "$LOG_FILE_PATH"
            # Capture stats for all running containers. --no-stream is crucial for single snapshot
            # Using 'table' format for readability, but can be 'json' for programmatic parsing
            docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}\t{{.PIDs}}" >> "$LOG_FILE_PATH" 2>&1
            echo "" >> "$LOG_FILE_PATH" # Add a newline for readability

            echo "--- Host Memory (free -h) ---" >> "$LOG_FILE_PATH"
            free -h >> "$LOG_FILE_PATH" 2>&1
            echo "" >> "$LOG_FILE_PATH"

            echo "--- Host Disk Usage (df -h) ---" >> "$LOG_FILE_PATH"
            df -h >> "$LOG_FILE_PATH" 2>&1
            echo "" >> "$LOG_FILE_PATH"

            # Optional: Top snapshot (can be very verbose, consider running less frequently or omitting)
            echo "--- Host Process Snapshot (top -b -n 1) ---" >> "$LOG_FILE_PATH"
            top -b -n 1 >> "$LOG_FILE_PATH" 2>&1
            echo "" >> "$LOG_FILE_PATH"

            sleep $INTERVAL_SECONDS
          done
          EOF
          chmod +x resource_monitor.sh

          # Run the script in the background
          ./resource_monitor.sh &
          echo $! > resource_monitor_pid.txt # Store PID to kill later
          echo "Resource monitor started in background."
      - run: |
          mkdir /home/runner/work/pytest-splunk-addon/pytest-splunk-addon/test_artifacts
          curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
          poetry install
          poetry run pytest -v -s --splunk-version=${{ matrix.splunk }} -m docker -m ${{ matrix.test-marker }} tests/e2e
      - name: Stop Resource Monitor
        if: always() # Ensure this runs even if pytest fails
        run: |
          if [ -f resource_monitor_pid.txt ]; then
            MONITOR_PID=$(cat resource_monitor_pid.txt)
            echo "Stopping resource monitor with PID: $MONITOR_PID"
            kill $MONITOR_PID || true # Kill the background process, ignore if already exited
            echo "Resource monitor stopped."
          fi
      - name: Upload Resource Usage Log
        uses: actions/upload-artifact@v4
        if: always() # Upload even if tests fail
        with:
          name: resource-usage-log ${{ matrix.test-marker }}
          path: resource_usage_${{ github.run_id }}.log
      - name: Stop Docker Events Listener
        if: always()
        run: |
          if [ -f docker_events_pid.txt ]; then
            EVENTS_PID=$(cat docker_events_pid.txt)
            kill $EVENTS_PID || true # Kill the background process, ignore if already exited
            echo "Docker events listener stopped."
          fi
      - name: Upload Docker Events Log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-events-log ${{ matrix.test-marker }}
          path: docker_events_${{ github.run_id }}.jsonl
      - name: Capture Docker Daemon Logs (from journalctl)
        if: always()
        run: |
          echo "Capturing Docker daemon logs..."
          sudo journalctl -u docker.service --since "10 minutes ago" --no-pager > docker_daemon_logs.txt
          echo "Docker daemon logs saved to docker_daemon_logs.txt"

      - name: Capture General Systemd Logs (last 10 minutes)
        if: always()
        run: |
          echo "Capturing general systemd logs from last 10 minutes..."
          sudo journalctl --since "10 minutes ago" --no-pager > systemd_general_logs.txt
          echo "General systemd logs saved to systemd_general_logs.txt"

      - name: Capture Systemd Error Logs (from current boot)
        if: always()
        run: |
          echo "Capturing systemd error logs from current boot..."
          sudo journalctl --boot -p err --no-pager > systemd_error_logs.txt
          echo "Systemd error logs saved to systemd_error_logs.txt"

      - name: Upload All Logs as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: all-debug-logs-${{ matrix.test-marker }}
          path: |
            docker_daemon_logs.txt
            systemd_general_logs.txt
            systemd_error_logs.txt
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: splunk diag ${{ matrix.test-marker }}
          path: /home/runner/work/pytest-splunk-addon/pytest-splunk-addon/test_artifacts

  publish:
    needs:
      - test-splunk-external
      - test-splunk-matrix
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          # Very Important semantic-release won't trigger a tagged
          # build if this is not set false
          submodules: false
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: "3.7"
      - uses: actions/download-artifact@v4
        with:
          name: THIRDPARTY
      - name: Update Notices
        run: cp -f THIRDPARTY NOTICE
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
      - id: semantic
        uses: splunk/semantic-release-action@v1.3
        with:
          git_committer_name: ${{ secrets.SA_GH_USER_NAME }}
          git_committer_email: ${{ secrets.SA_GH_USER_EMAIL }}
          gpg_private_key: ${{ secrets.SA_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.SA_GPG_PASSPHRASE }}
          extra_plugins: |
            semantic-release-replace-plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
      - if: ${{ steps.semantic.outputs.new_release_published == 'true' }}
        run: |
          poetry build
          poetry publish -n -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_TOKEN }}
