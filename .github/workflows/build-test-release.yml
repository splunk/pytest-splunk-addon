name: Build Test Release

on: [push]

jobs:
  test-splunk:
    runs-on: ubuntu-latest
    name: Test External Splunk
    strategy:
      fail-fast: false
      matrix:
        splunk-version: ["8.0","8.1","8.2"]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup for testing
        run: |
          pip install git+https://github.com/pixelb/crudini
          mkdir test-results-${{ matrix.splunk-version }}
      - name: Splunk Up
        run: |
          export SPLUNK_APP_PACKAGE=./tests/addons/TA_fiction
          export SPLUNK_ADDON=TA_fiction
          export SPLUNK_APP_ID=TA_fiction
          ls -l deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf
          export SPLUNK_VERSION=$(crudini --get deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf ${{ matrix.splunk-version }} VERSION)
          echo $SPLUNK_VERSION
          docker-compose -f "docker-compose-ci.yml" build
          SPLUNK_PASSWORD=Chang3d! docker-compose -f docker-compose-ci.yml up -d splunk
          sleep 90
      - name: Test
        run: |
          SPLUNK_PASSWORD=Chang3d! docker-compose -f docker-compose-ci.yml up --abort-on-container-exit
          docker volume ls
      - name: Collect Results
        run: |
          docker volume ls
          docker container create --name dummy \
                              -v pytest-splunk-addon_results:/work/test-results \
                              registry.access.redhat.com/ubi7/ubi
          docker cp dummy:/work/test-results/test.xml test-results-${{ matrix.splunk-version }}
      - uses: actions/upload-artifact@v2.2.4
        if: always()
        with:
          name: splunk ${{ matrix.splunk-version }} external test artifacts
          path: |
            test-results-${{ matrix.splunk-version }}
  
  semgrep:
    runs-on: ubuntu-latest
    name: security-sast-semgrep
    steps:
      - uses: actions/checkout@v2
      - name: Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          publishDeployment: ${{ secrets.SEMGREP_DEPLOYMENT_ID }}
          publishToken: ${{ secrets.SEMGREP_PUBLISH_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - test-splunk
    steps:
      - uses: actions/checkout@v2
        with:
          # Very Important semantic-release won't trigger a tagged
          # build if this is not set false
          persist-credentials: false
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install Poetry
        run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
      - name: Build
        run: |
          # shellcheck disable=SC1090
          source "$HOME/.poetry/env"
          poetry build
      - uses: actions/upload-artifact@v2
        if: always() 
        with:
          name: Package
          path: dist/

  publish:
    if: always()
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: exit without publish if PR
        if: github.event_name == 'pull_request'
        run: |
          exit 1
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
          persist-credentials: false
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2.5.4
        with:
          semantic_version: 17
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
            @google/semantic-release-replace-plugin
        env:
          GITHUB_TOKEN: ${{ secrets.SEMREL_TOKEN }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
  
  update-semver:
    name: Move Respository semver tags
    if: startsWith(github.ref, 'refs/tags/v')
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: haya14busa/action-update-semver@v1