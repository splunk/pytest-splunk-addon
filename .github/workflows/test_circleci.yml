name: Test migration

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Deploy splunk
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest]
        # python-version: [3.7]
        SPLUNK_VERSION: ["8.0"]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Result Directory
        run: mkdir test-results
      - run: docker-compose pull
      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      - name: Build Image
        run: |
          export SPLUNK_APP_PACKAGE=./tests/addons/TA_fiction
          export SPLUNK_ADDON=TA_fiction
          export SPLUNK_APP_ID=TA_fiction
          export SPLUNK_VERSION=${{ matrix.SPLUNK_VERSION }}
          docker-compose -f "docker-compose-ci.yml" build
      - name: List of Images
        run: docker images
      - name: Splunk Up
        run: |
          SPLUNK_PASSWORD=Chang3d! docker-compose -f docker-compose-ci.yml up -d splunk
          sleep 90
      - name: Splunk Test
        run: |
          SPLUNK_PASSWORD=Chang3d! docker-compose -f docker-compose-ci.yml up --abort-on-container-exit
          docker volume ls
      - name: Fetch results
        run: |
          docker volume ls
          docker container create --name dummy \
                              -v project_results:/work/test-results \
                              registry.access.redhat.com/ubi7/ubi
          docker cp dummy:/work/test-results/test.xml test-results/
      - name: Get results
        run: |
          ls -al test-results/

      # - name: Set up OS=${{ matrix.os }}::Python=${{ matrix.python-version }}::Splunk=${{ matrix.splunk-version }}
      #   uses: actions/setup-python@v1
      #   with:
      #     python-version: ${{ matrix.python-version }}
      # - name: Install dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y --no-install-recommends apt-utils
      #     sudo apt-get install locales
      #     sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
      #     curl https://pyenv.run | bash
      #     export PATH="~/.pyenv/bin:$PATH"
      #     eval "$(pyenv init -)"
      #     pyenv install 3.7.8
      #     pyenv local 3.7.8
      #     curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      #     source ~/.poetry/env
      # - name: Test with pytest
      #   run: |
      #     export PATH="~/.pyenv/bin:$PATH"
      #     eval "$(pyenv init -)"
      #     source ~/.poetry/env
      #     poetry install -E docker
      #     poetry run pytest -v --splunk-version=${{ matrix.splunk-version }} -m external

      # KUBERNETES
      # - name: Check files
      #   run: |
      #     ls -l deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf
      # - name: Start minikube
      #   uses: medyagh/setup-minikube@master
      # - name: Try the cluster !
      #   run: kubectl get pods -A
      # - name: Build image
      #   run: |
      #     export SHELL=/bin/bash
      #     export SPLUNK_APP_PACKAGE=tests/addons/TA_fiction
      #     eval $(minikube -p minikube docker-env)
      #     docker build --build-arg SPLUNK_APP_PACKAGE=tests/addons/TA_fiction --build-arg SPLUNK_ADDON=TA_fiction -f ./Dockerfile.splunk -t splunk_image .
      #     echo -n "verifying images:"
      #     docker images
      # - name: Create a namespace
      #   run:
      #     kubectl create namespace splunk-ns
      # - name: Deploy to minikube
      #   run:
      #     kubectl apply -f ./kubernetes_manifests/deployment.yaml
      # - name: Get deployment
      #   run: |
      #     kubectl get deploy -n splunk-ns