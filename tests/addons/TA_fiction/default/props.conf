######## All the scenarios mentioned here are expected to PASS ########
#Copyright Splunk

# Component tested: source, EVAL
# Scenario: Data must be present in the respective source=”/opt/splunk/var/log/splunk/splunkd.log*”
# Scenario-EVAL: The plugin tests that the field generated from EVAL is present in both source and sourcetype
## Plugin covers this by generating searches for the component along with source or sourcetypes.
[source::/opt/splunk/var/log/splunk/splunkd.log]
EVAL-component = "test"

# Component tested: source and EVAL
# Scenario: | is used so the settings mentioned applies to two sources
## source::/opt/splunk/var/log/splunk/metric.log*
## source::/opt/splunk/var/log/splunk/health.log*
## So the plugin handles this kind of scenarios by generating tests for each source.
# Scenario-EVAL: The plugin tests that the field generated from EVAL is present in source
## Plugin covers this by generating searches for the component along with source
[source::...(/opt/splunk/var/log/splunk/)(splunkd.log*|splunkd_access.log*)]
EVAL-splunk_server = "server1"

[splunkd]
# Component tested: extract ((?<name>regex))
# Scenario: single field extraction so the plugin tests if the field `extractone` is extracted.
EXTRACT-one = group=(?<extractone>[^,]+)

# Component tested: extract ((?<name>regex))
# Scenario: multiple field extraction so the plugin generates multiple tests one individual for each extracted field 
## and one test with combinatory query which tests all the fields must be extracted from a single event. 
EXTRACT-two = group=(?<extracttwoA>[^,]+).*name=(?<extracttwoB>[^,]+)

# Component tested: extract (?P<name>regex)
# Scenario: single field extraction so the plugin tests if the field `extractthree` is extracted.
EXTRACT-three = group=(?P<extractthree>[^,]+)

# Component tested: extract (?P<name>regex)
# Scenario: multiple field extraction so the plugin generates multiple tests one individual for each extracted field 
## and one test with combinatory query which tests all the fields must be extracted from a single event. 
EXTRACT-four = group=(?P<extractfourA>[^,]+).*name=(?P<extractfourB>[^,]+)

# Component tested: extract (?'name'regex)
# Scenario: single field extraction so the plugin tests if the field `extractfive` is extracted.
EXTRACT-five = group=(?'extractfive'[^,]+)

# Component tested: extract (?'name'regex)
# Scenario: multiple field extraction so the plugin generates multiple tests one individual for each extracted field 
## and one test with combinatory query which tests all the fields must be extracted from a single event. 
EXTRACT-six = group=(?'extractsixA'[^,]+).*name=(?'extractsixB'[^,]+)

# Component tested: extract ((?<name>regex)) + (?'name'regex) + (?P<name>regex)
# Scenario: multiple field extraction so the plugin generates multiple tests one individual for each extracted field 
## and one test with combinatory query which tests all the fields must be extracted from a single event. 
EXTRACT-seven = group=(?<extractsevenA>[^,]+).*name=(?'extractsevenB'[^,]+).*instantaneous_kbps=(?P<extractsevenC>[^,]+)

# Component tested: extract
# Scenario: "in" used as a regex and not as a keyword so the plugin tests if the field `hotwarmpath_extract` is extracted or not using search queries
EXTRACT-0 = in hotWarmPath=(?<hotwarmpath_extract>.*)

# Component tested: extract
# Scenario: use of "in","IN","In","iN" keyword to extract from source_field
## tests the fields extracted as mentioned in above scenario extracting multiple fields.
## tests that if source_field is present or not
## and one test with combinatory query containing all the fields and source_field making sure that fields must be extracted from the source_field.
EXTRACT-eight = (?<hotWarmPath_in>.*) in hotwarmpath_extract
EXTRACT-nine = (?<hotWarmPath_IN>.*) IN hotwarmpath_extract
EXTRACT-ten = (?<hotWarmPath_In>.*) In hotwarmpath_extract
EXTRACT-eleven = (?<hotWarmPath_iN>.*) iN hotwarmpath_extract

# Component tested: extract
# Scenario: use of "in","IN","In","iN" keyword to extract multiple fields from source_field
## tests that if source_field is present or not
## and one test with combinatory query containing all the fields and source_field making sure that fields must be extracted from the source_field.
EXTRACT-twelve = (?<hotWarmPath_in_opt>opt)\/splunk(?<hotWarmPath_in_other>.*) in hotwarmpath_extract

# Component tested: extract
# Scenario: "in" used as a regex and not as a keyword so the plugin tests if multiple fields are extracted or not using search queries
EXTRACT-thirteen = (?<date_value_in_hotwarmpath_event>\d+-\d+-\d+)\s(?<time_value_in_hotwarmpath_event>\d+:\d+:\d+).*[i]n hotWarmPath=(?<hotwarmpath_extract_multiple>.*)
EXTRACT-fourteen = (?<date_only_in_hotwarmpath_event>\d+-\d+-\d+).*in hotWarmPath=(?<hotwarmpath_extract_two>.*)

# The explanation of the REPORT scenarios is explained in transforms.conf
## Single transforms stanza associated with REPORT
REPORT-tsc-delim-fields = tsc-delim-fields
REPORT-tsc-sk-regex-format = tsc-sk-regex-format
REPORT-tsc-sk-delim-format = tsc-sk-delim-format

## multiple transforms stanza associated with REPORT
REPORT-tsc-regex-format = tsc-regex, tsc-regex-format


# Component tested: sourcetype, EVAL
# Scenario: Data must be present in the respective sourcetype=splunkd
# Scenario-EVAL: The plugin tests that the field generated from EVAL is present in both source and sourcetype
## Plugin covers this by generating searches for the component along with source or sourcetypes.
EVAL-myeval = "Working"

# Component tested: FIELDALIAS
# Scenario: Plugin searches for the original field and one or more alias field names.
FIELDALIAS-one =  extractone AS aliasone
FIELDALIAS-two = extractone as aliastwo

# Scenario: use of case-insensiive as/AS
# Scenario: two fields separated by either " " or ","
FIELDALIAS-three = extractone as aliasthree extractone AS aliasfour
FIELDALIAS-four = extractone AS aliasfive, extractone as aliassix

# Scenario: also covers case-insensitive asnew/ASNEW
# Scenario: two fields separated by either " " or ","
FIELDALIAS-five = extractone asnew aliasseven
FIELDALIAS-six = extractone ASNEW aliaseight
FIELDALIAS-seven = extractone asnew aliasnine extractone ASNEW aliasten
FIELDALIAS-eight = extractone ASNEW aliaseleven, extractone asnew aliastwelve


# Component tested: lookup
# Scenario: The LOOKUP- prefix is actually case-insensitive. Acceptable variants include:
##   LOOKUP_<class> = [...]
##   LOOKUP<class>  = [...]
##   lookup_<class> = [...]
##   lookup<class>  = [...]
## The plugin is designed to handle all such scenarios.
LOOKUP_test_command_spelling_output1 = ta_ficition_lookup component OUTPUT context_test1
LOOKUPtest_command_spelling_output2  = ta_ficition_lookup component OUTPUT context_test2
LOOKUP-test_command_spelling_output3 = ta_ficition_lookup component OUTPUT context_test1
lookup_test_command_spelling_output4 = ta_ficition_lookup component OUTPUT context_test2
lookuptest_command_spelling_output5  = ta_ficition_lookup component OUTPUT context_test1
lookup-test_command_spelling_output6  = ta_ficition_lookup component OUTPUT context_test2
LOOKUP_test_command_spelling_outputnew = ta_ficition_lookup component OUTPUTNEW context_test1
LOOKUPtest_command_spelling_outputnew2  = ta_ficition_lookup component OUTPUTNEW context_test2
LOOKUP-test_command_spelling_outputnew3 = ta_ficition_lookup component OUTPUTNEW context_test1
lookup_test_command_spelling_outputnew4 = ta_ficition_lookup component OUTPUTNEW context_test2
lookuptest_command_spelling_outputnew5  = ta_ficition_lookup component OUTPUTNEW context_test1
lookup-test_command_spelling_outputnew6  = ta_ficition_lookup component OUTPUTNEW context_test2

# Component tested: lookup
# Scenario: To test input_fields, output_fields exists or not.
## If multiple output fields are present then the plugin tests presence of all the fielfs via search queries
## Plugin generates multiple tests one individual for each field before and after OUTPUT keyword.
## and one test with combinatory query which tests all the fields.
## Plugin identifies the fields for all the below scenarios.

# input_field name aliased as different field
LOOKUP-test_as_input = ta_ficition_lookup test_name AS name OUTPUT context_test1

# directly providing input_field_name and output_field is aliased
LOOKUP-test_as_output = ta_ficition_lookup component OUTPUT context_test AS context_test_alternative

# both input_field and output_field are aliased
LOOKUP-test_as_input_output = ta_ficition_lookup test_name AS name OUTPUT context_test AS context_test_alternative2

# multiple output fields are aliased.
LOOKUP-test_as_input_output_multiple = ta_ficition_lookup test_name AS name OUTPUT context_test AS context_test_alternative3, status_test AS status2

# Component tested: lookup-outputnew
# Scenario: To test input_fields, output_fields exists or not.
## If multiple output fields are present then the plugin tests presence of all the fielfd via search queries
## Plugin generates multiple tests one individual for each field before and after OUTPUTNEW keyword.
## and one test with combinatory query which tests all the fields.
LOOKUP-test_as_input_outputnew_multiple = ta_ficition_lookup test_name AS name OUTPUTNEW context_test AS context_test_alternative4 status_test AS status2

# Component tested: lookup "as" keyword is case-insensitive
# Scenario: To test input_fields, output_fields exists or not with combinations of "as" and "AS" keywords.
## If multiple output fields are present then the plugin tests presence of all the fielfd via search queries
## Plugin generates multiple tests one individual for each field before and after OUTPUTNEW keyword.
## and one test with combinatory query which tests all the fields.
LOOKUP-test_AS_and_as_keyword = ta_ficition_lookup test_name as name OUTPUT context_test AS context_test_alternative5
LOOKUP-test_AS_keyword = ta_ficition_lookup test_name AS name OUTPUT context_test2 status_test as status2
LOOKUP-test_as_keyword = ta_ficition_lookup test_name as name OUTPUT context_test1 status_test as status2
LOOKUP-test_as_and_AS_keyword2 = ta_ficition_lookup test_name AS name OUTPUT status_test as status2

# Multiple input field and single output field
LOOKUP-test_string_outputfield = ta_ficition_lookup component OUTPUTNEW status.test
# Multiple input field and single output field
LOOKUP-test_multiple_input = ta_ficition_lookup component, aliasone OUTPUT context_test2
# Single input field and multiple output field with "_"
LOOKUP-test_multiple_output = ta_ficition_lookup component OUTPUT context_test1, status2
# Multiple input field and multiple output field
LOOKUP-test_multiple_input_output = ta_ficition_lookup component, aliasone OUTPUT context_test1, status2
# Single input field and multiple output field with OUTPUTNEW
LOOKUP-test_multiple_outputnew = ta_ficition_lookup component OUTPUTNEW context_test2, status2, status_test as status2
# Multiple input field and multiple output field with OUTPUTNEW
LOOKUP-test_multiple_input_outputnew = ta_ficition_lookup component, aliasone OUTPUT context_test2, status2

# without OUTPUT/OUTPUTNEW param the plugin checks if the input_fields field exists or not
# And tests are also generated for the output fields present in the csv file .
LOOKUP-test_no_output = ta_ficition_lookup component

## Tests shouldn't generate for below stanza types
[source::....fiction]
sourcetype = fiction

[fiction]
rename=fiction_renamed
