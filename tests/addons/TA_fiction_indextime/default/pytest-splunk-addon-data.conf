## Total test cases: 124
## Index time Passed: 93 (Including untokenized event test case)
## Index time Failed: 00
## Search Time Passed: 28
## Search Time Failed: 00
## Skipped: 4

## Common Test
## 1 passed (Find untokenised values in events)

# Covers almost all the rules supported by pytest-splunk-addon plugin
# host will be assigned via plugin
# timestamp value will be assigned based on the it is present events
# file monitoring input type is used to ingest the data in splunk
# also covers the scenario for tokenizing the samples through the lookup files
# Total test cases: 37
# 18 key_fields are Passed
# 18 _time Passed
# 1 line_breaker Passed
[sample_file.samples]
sourcetype = test:indextime:sourcetype_basic
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:sourcetype_basic
sample_count = 2
timestamp_type = event

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time

token.1.token = ##token_list_all##
token.1.replacementType = all
token.1.replacement = list["a","b"]

token.2.token = ##token_src_ipv6##
token.2.replacementType = random
token.2.replacement = src["ipv6"]

token.3.token = ##token_static_field##
token.3.replacementType = static
token.3.replacement = sample_value

token.4.token = ##token_src_port##
token.4.replacementType = random
token.4.replacement = src_port
token.4.field = src_port

token.5.token = ##token_dest_port##
token.5.replacementType = random
token.5.replacement = dest_port
token.5.field = dest_port

token.6.token = ##token_dvc_ipv4##
token.6.replacementType = random
token.6.replacement = dvc["ipv4"]
token.6.field = dvc

token.7.token = ##token_user_name##
token.7.replacementType = random
token.7.replacement = user["name"]
token.7.field = user

token.8.token = ##token_user_email##
token.8.replacementType = random
token.8.replacement = user["email"]

token.9.token = ##token_user_domain_user##
token.9.replacementType = random
token.9.replacement = user["domain_user"]

token.10.token = ##token_user_distinquised_name##
token.10.replacementType = random
token.10.replacement = user["distinquised_name"]

token.11.token = ##token_host_ipv4##
token.11.replacementType = random
token.11.replacement = host["ipv4"]

token.12.token = ##token_host_ipv6##
token.12.replacementType = random
token.12.replacement = host["ipv6"]

token.13.token = ##token_host_host##
token.13.replacementType = random
token.13.replacement = host["host"]

token.14.token = ##token_host_fqdn##
token.14.replacementType = random
token.14.replacement = host["fqdn"]

token.15.token = ##token_hex##
token.15.replacementType = random
token.15.replacement = hex(20)

token.16.token = ##token_ipv4##
token.16.replacementType = random
token.16.replacement = ipv4

token.17.token = ##token_ipv6##
token.17.replacementType = random
token.17.replacement = ipv6

token.18.token = ##token_list_random##
token.18.replacementType = random
token.18.replacement = list["one","two","three"]

token.19.token = ##token_int_all##
token.19.replacementType = all
token.19.replacement = integer[21:24]

token.20.token = ##token_email##
token.20.replacementType = random
token.20.replacement = email

token.21.token = ##token_mac##
token.21.replacementType = random
token.21.replacement = mac

token.22.token = ##token_float##
token.22.replacementType = random
token.22.replacement = float[1.0:5.0]

token.23.token = ##token_guid##
token.23.replacementType = random
token.23.replacement = guid

token.24.token = ##token_src_host##
token.24.replacementType = random
token.24.replacement = src["host"]

token.25.token = ##token_src_fqdn##
token.25.replacementType = random
token.25.replacement = src["fqdn"]

token.26.token = ##token_dest_ipv6##
token.26.replacementType = random
token.26.replacement = dest["ipv6"]

token.27.token = ##token_dest_host##
token.27.replacementType = random
token.27.replacement = dest["host"]

token.28.token = ##token_dest_fqdn##
token.28.replacementType = random
token.28.replacement = dest["fqdn"]

token.29.token = ##token_dvc_ipv6##
token.29.replacementType = random
token.29.replacement = dvc["ipv6"]

token.30.token = ##token_dvc_host##
token.30.replacementType = random
token.30.replacement = dvc["host"]

token.31.token = ##token_dvc_fqdn##
token.31.replacementType = random
token.31.replacement = dvc["fqdn"]

token.32.token = ##token_int_random##
token.32.replacementType = random
token.32.replacement = integer[1:20]

token.33.token = ##token_dest_ipv4##
token.33.replacementType = random
token.33.replacement = dest["ipv4"]
token.33.field = dest

token.34.token = ##token_src_ipv4##
token.34.replacementType = random
token.34.replacement = src["ipv4"]
token.34.field = src

token.35.token = ##token_file_random##
token.35.replacementType = random
token.35.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/samples/random_file.sample]

token.36.token = ##token_file_all##
token.36.replacementType = all
token.36.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/samples/all_file.sample]

token.37.token = ##token_url_ip_host##
token.37.replacementType = random
token.37.replacement = url["ip_host"]

token.38.token = ##token_url_fqdn_host##
token.38.replacementType = random
token.38.replacement = url["fqdn_host"]

token.39.token = ##token_url_path##
token.39.replacementType = random
token.39.replacement = url["path"]

token.40.token = ##token_url_query##
token.40.replacementType = random
token.40.replacement = url["query"]

token.41.token = ##token_url_protocol##
token.41.replacementType = random
token.41.replacement = url["protocol"]

token.42.token = ##token_url_full##
token.42.replacementType = random
token.42.replacement = url["full"]

token.43.token = ##token_lookup##
token.43.replacementType = random
token.43.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/lookups/sample_lookup.csv:input]

token.44.token = ##token_lookup_op##
token.44.replacementType = random
token.44.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/lookups/sample_lookup.csv:output]

token.45.token = ##int_negative##
token.45.replacementType = random
token.45.replacement = integer[-2:0]

token.46.token = ##float_negative##
token.46.replacementType = random
token.46.replacement = float[-2.0:-1.0]

# Covers the scenario for user and email relation
# Total test cases: 3
# Host will be assigned via plugin
# timestamp value will be assigned based on, it is present events
# file monitoring input type is used to ingest the data into splunk
# 1 key_fields passed
# 1 _time passed
# 1 line_breaker passed
[sample_file_two.samples]
sourcetype = test:indextime:sourcetype:user_email_relation_time_plugin
host_type = plugin
input_type = file_monitor
earliest = -45m
latest = -15m
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:sourcetype:user_email_relation_time_plugin
sample_count = 4
timestamp_type = event

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time

token.1.token = ##token_user_name##
token.1.replacementType = random
token.1.replacement = user["name"]
token.1.field = user

token.2.token = ##token_user_email##
token.2.replacementType = random
token.2.replacement = user["email"]
token.2.field = user

token.3.token = ##token_user_domain_user##
token.3.replacementType = random
token.3.replacement = user["domain_user"]
token.3.field = user

token.4.token = ##token_user_distinquised_name##
token.4.replacementType = random
token.4.replacement = user["distinquised_name"]
token.4.field = user

token.5.token = @@tokenemail
token.5.replacementType = random
token.5.replacement = email

# Covers the scenario to tokenize the dependent tokens with replacement_type all for the indexed file(mvfile) 
# Total test cases: 3
# Host will be assigned via events
# timestamp value will be assigned based on the it is present events
# file monitoring input type is used to ingest the data into splunk
# 1 key_fields passed
# 1 _time passed
# 1 line_breaker passed
[sample_file_three.samples]
sourcetype = test:indextime:sourcetype:file_all_dependent
host_type = event
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:sourcetype:file_all_dependent
sample_count = 4
timestamp_type = event

token.0.token = ##test_host_event## 
token.0.replacementType = random
token.0.replacement = host["host"]
token.0.field = host

token.1.token = ##token_file_all_dependent##
token.1.replacementType = random
token.1.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/samples/dependent_file.sample:1]

token.2.token = ##token_file_random_dependent##
token.2.replacementType = random
token.2.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/samples/dependent_file.sample:2]

token.3.token = ##token_dest_all##
token.3.replacementType = random
token.3.replacement = dest["ipv4","ipv6","host","fqdn"]
token.3.field = dest

token.4.token = ##token_dest_ipv4##
token.4.replacementType = random
token.4.replacement = dest["ipv4"]

token.5.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.5.replacementType = timestamp
token.5.replacement = %Y-%m-%dT%H:%M:%S
token.5.field = _time

# Covers the scenario to ingest the syslog data 
# Headers' values will be assigned to the metadata of the events (sourcetype, source etc.)
# Host will be assigned via events
# timestamp value will be assigned via plugin
# scripted_input input type is used to ingest the data into splunk
# Total test cases: 3
# 2 key_fields passed
# 1 line_breaker passed
[test_scripted_input_one.samples]
earliest = -45m
latest = -30m
source = test_scripted_input_source
sourcetype = test_scripted_input_sourcetype
host_type = event
input_type = scripted_input
sourcetype_to_search = test_scripted_input_sourcetype
sample_count = 3
timestamp_type = plugin

token.0.token = ##host##
token.0.replacementType = random
token.0.replacement = host["host"]
token.0.field = host

token.1.token = ##IP##
token.1.replacementType = random
token.1.replacement = ipv4

token.2.token = ##Mount##
token.2.replacementType = random
token.2.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/samples/scripted_input_file_one.sample]

token.3.token = ##Path##
token.3.replacementType = random
token.3.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/samples/scripted_input_file_two.sample]

token.4.token = ##r_op/s##
token.4.replacementType = random
token.4.replacement = float[0.000:1000.000]

token.5.token = ##w_op/s##
token.5.replacementType = random
token.5.replacement = float[0.000:1000.000]

token.6.token = ##r_KB/s##
token.6.replacementType = random
token.6.replacement = float[0.000:1000.000]

token.7.token = ##w_KB/s##
token.7.replacementType = random
token.7.replacement = float[0.000:1000.000]

token.8.token = ##rpc_backlog##
token.8.replacementType = random
token.8.replacement = float[0.00:100.00]

token.9.token = ##r_avg_RTT##
token.9.replacementType = random
token.9.replacement = float[0.000:3000.000]

token.10.token = ##w_avg_RTT##
token.10.replacementType = random
token.10.replacement = float[0.000:3000.000]

token.11.token = ##r_avg_exe##
token.11.replacementType = random
token.11.replacement = float[0.000:3000.000]

token.12.token = ##w_avg_exe##
token.12.replacementType = random
token.12.replacement = float[0.000:3000.000]

token.13.token = ##txKB_PS2##
token.13.replacementType = all
token.13.replacement = list["<n/a>", "test"]

# Covers the scenario to test the static rule and the regex in the stanza 
# replacement will be assigned to the tokens it self
# stanza's regex will be matched to get the files for samples
# Host will be assigned via events
# timestamp value will be assigned via plugin
# modinput input type is used to ingest the data into splunk (will ingest one event at a time)
# Total test cases: 9
# 2 key_fields passed
# 4 _time passed
# 3 line_breaker passed
[test_regex_.*.samples]
sourcetype = test:indextime:sourcetype:updated_sourcetype
host_type = plugin
input_type = modinput
source = pytest-splunk-addon:modinput
sourcetype_to_search = test:indextime:sourcetype:updated
timestamp_type = event

token.0.token = ##static_value_1##
token.0.replacementType = static
token.0.replacement = sample_value_1

[test_regex_one.samples]
sample_count = 2

token.0.token = ##static_value_2##
token.0.replacementType = static
token.0.replacement = sample_value_2

token.1.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.1.replacementType = timestamp
token.1.replacement = %Y-%m-%dT%H:%M:%S
token.1.field = _time

token.2.token = ##static_value_3##
token.2.replacementType = static
token.2.replacement = sample_value_3

[test_regex_two.samples]
expected_event_count = 2

token.0.token = ##static_value_4##
token.0.replacementType = static
token.0.replacement = sample_value_4

token.1.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.1.replacementType = timestamp
token.1.replacement = %Y-%m-%dT%H:%M:%S
token.1.field = _time

token.2.token = ##static_value_5##
token.2.replacementType = static
token.2.replacement = sample_value_5

# This stanza should not consider tokens and metadata of above stanza for test generation.
# Total test cases: 3
# 2 key_fields passed
# 1 line_breaker passed
[postfix_test_regex_two.samples]
sourcetype = test:postfix:regex:stanza
host_type = plugin
input_type = modinput
source = pytest-splunk-addon:modinput
sourcetype_to_search = test:postfix:regex:stanza
timestamp_type = plugin
sample_count = 2

token.0.token = ##static_value_1##
token.0.replacementType = static
token.0.replacement = sample_value_1

token.1.token = ##dest##
token.1.replacementType = random
token.1.replacement = dest["ipv4"]
token.1.field = dest

# No testcase should generate for this stanza.
[test_regex_]
sourcetype = test:regex:stanza
host_type = plugin
input_type = modinput
source = pytest-splunk-addon:modinput
sourcetype_to_search = test:regex:stanza
timestamp_type = plugin
sample_count = 2

token.0.token = ##static_value_1##
token.0.replacementType = static
token.0.replacement = sample_value_1


# Test the linebreaking feature when the events are ingestd into splunk via scripted input
# Host values will be assigned via plugin
# timestamp value will be assigned via events
# scripted_input input type is used to ingest the data into splunk
# Total test cases: 5
# 2 key_fields are passed
# 2 _time passed
# 1 line_breaker passed
[scripted_input_line_breaking_fiction.samples]
sourcetype = test:indextime:scripted_input_line_breaking_fiction
host_type = plugin
input_type = scripted_input
source = pytest-splunk-addon:scripted_input
sourcetype_to_search = test:indextime:scripted_input_line_breaking_fiction
sample_count = 2
earliest = -60m
timestamp_type = event

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%SZ
token.0.field=_time

token.1.token = ##token_list_all##
token.1.replacementType = all
token.1.replacement = list["a","b"]

token.2.token = ##token_src_port##
token.2.replacementType = random
token.2.replacement = src_port
token.2.field = src_port

token.3.token = ##token_dest_port##
token.3.replacementType = random
token.3.replacement = dest_port
token.3.field = dest_port

token.4.token = ##token_dest_ipv4##
token.4.replacementType = random
token.4.replacement = dest["ipv4"]
token.4.field = dest

token.5.token = ##token_src_ipv4##
token.5.replacementType = random
token.5.replacement = src["ipv4"]
token.5.field = src

token.6.token = (\d{2}-\d{2}-\d{4}T\d{2}:\d{2}:\d{2})
token.6.replacementType = timestamp
token.6.replacement = %d-%m-%YT%H:%M:%S

# Test the key_fields in the events
# Host values will be assigned via plugin
# timestamp value will be assigned via events
# scripted_input input type is used to ingest the data into splunk
# Total test cases: 3
# 1 key_fields passed
# 1 _time passed
# 1 line_breaker passed
[scripted_input_key_fields_fiction.samples]
sourcetype = test:indextime:scripted_input_key_fields_fiction
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:scripted_input_key_fields_fiction
sample_count = 2
earliest = -60m
timestamp_type = event

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%SZ

token.1.token = ##token_list##
token.1.replacementType = random
token.1.replacement = list["a","b"]

token.2.token = ##token_src_port##
token.2.replacementType = random
token.2.replacement = src_port
token.2.field = src_port

token.3.token = ##token_dest_port##
token.3.replacementType = random
token.3.replacement = dest_port
token.3.field = dest_port

token.4.token = ##token_dest_ipv4##
token.4.replacementType = random
token.4.replacement = dest["ipv4"]
token.4.field = dest

token.5.token = ##token_src_ipv4##
token.5.replacementType = random
token.5.replacement = src["ipv4"]
token.5.field = src

token.6.token = (\d{2}-\d{2}-\d{4}T\d{2}:\d{2}:\d{2})
token.6.replacementType = timestamp
token.6.replacement = %Y-%m-%dT%H:%M:%SZ
token.6.field=_time

# Test the time values are assigned via plugin when the events are ingested using file_monitoring
# Host values will be assigned via plugin
# timestamp value will be assigned via plugin
# file_monitor input type is used to ingest the data into splunk
# Total test cases: 2
# 1 key_fields passed
# 1 line_breaker passed
[file_monitor_time_stamp_plugin.samples]
sourcetype = test:indextime:file_monitor_time_stamp_plugin
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:file_monitor_time_stamp_plugin
sample_count = 2
earliest = -60m
timestamp_type = plugin

token.1.token = ##token_list##
token.1.replacementType = random
token.1.replacement = list["a","b"]

token.2.token = ##token_src_port##
token.2.replacementType = random
token.2.replacement = src_port
token.2.field = src_port

token.3.token = ##token_dest_port##
token.3.replacementType = random
token.3.replacement = dest_port
token.3.field = dest_port

token.4.token = ##token_dest_ipv4##
token.4.replacementType = random
token.4.replacement = dest["ipv4"]
token.4.field = dest

token.5.token = ##token_src_ipv4##
token.5.replacementType = random
token.5.replacement = src["ipv4"]
token.5.field = src

# Test the time values are assigned via plugin when the events are ingested using file_monitoring
# Host values will be assigned via events
# timestamp value will be assigned via plugin
# modinput input type is used to ingest the data into splunk
# Total test cases: 3
# 2 _key_fields passed
# 1 line_breaker passed
[modinput_host_event_time_plugin.samples]
sourcetype = test:indextime:sourcetype:modinput_host_event_time_plugin
host_type = event
input_type = modinput
source = pytest-splunk-addon:modinput
sourcetype_to_search = test:indextime:sourcetype:modinput_host_event_time_plugin
timestamp_type = plugin
sample_count = 2

token.0.token = ##host_value##
token.0.replacementType = random
token.0.replacement = host["host"]
token.0.field=host

token.1.token = static_value_2=(##static_value_2##)
token.1.replacementType = static
token.1.replacement = sample_value_2

token.2.token = ##static_value_3##
token.2.replacementType = static
token.2.replacement = sample_value_3

## Scenario to ingest the events into splunk through SC4S
## Total Tests 3
## 2 Time Passed
## 1 Line_Breaker Passed
[sc4s_host_plugin_time.sample]
timestamp_type = event 
sourcetype = mcafee:epo:syslog
host_type = plugin
input_type = syslog_tcp
source = mcafee_agent
sourcetype_to_search = mcafee:epo:syslog
sample_count = 1

token.0.token = ##TimeStamp##
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S.0Z
token.0.field = _time

token.1.token = ##HostName##
token.1.replacementType = random
token.1.replacement = host["host"]

token.2.token = ##tenantGUID##
token.2.replacementType = random
token.2.replacement = guid

token.3.token = ##TokenList##
token.3.replacementType = all
token.3.replacement = list["a","b"]

token.4.token = ##AgentGUID##
token.4.replacementType = random
token.4.replacement = guid

token.5.token = ##IPAddress##
token.5.replacementType = random
token.5.replacement = ipv4

token.6.token = ##OSName##
token.6.replacementType = random
token.6.replacement = user["name"]

token.7.token = ##UserName##
token.7.replacementType = random
token.7.replacement = user["name"]

token.8.token = ##RawMACAddress##
token.8.replacementType = random
token.8.replacement = mac

token.9.token = ##Hex##
token.9.replacementType = random
token.9.replacement = hex(20)

token.10.token = ##IPAddressIPV6##
token.10.replacementType = random
token.10.replacement = ipv6


# Test the line breaker  when the events are ingested using file_monitoring
# Host values will be assigned via plugin
# timestamp value will be assigned via plugin
# file_monitor input type is used to ingest the data into splunk
# Total test cases: 1
# 1 line_breaker passed
[file_monitor_line_breaker_sample.samples]
sourcetype = test:indextime:file_monitor_line_breaker
host_type = plugin
breaker = (\d{6} \d{2}:\d{2}:\d{2})?(\d+)?\s+Checking\s|(\d{6} \d{2}:\d{2}:\d{2})\s+\d+\s+regex_match
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:file_monitor_line_breaker
timestamp_type = plugin
sample_count = 4

# Test the line breaker  when the events are ingested using modinput
# Host values will be assigned via plugin
# timestamp value will be assigned via event
# modinput is used to ingest the data into splunk
# Total test cases: 5
# 4 _time passed
# 1 line_breaker passed
[modinput_line_breaker.samples]
interval = 60
earliest = -60s
latest = now
source = pytest-splunk-addon:file_monitor
sourcetype = test:indextime:modinput_line_breaker
input_type = modinput
host_type = plugin
sourcetype_to_search = test:indextime:modinput_line_breaker
timestamp_type = event
sample_count = 1
breaker = %%

token.0.token = (\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2})
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%d %H:%M:%S
token.0.field = _time


# Host_prefix value to be added when making search query
# Host values will be assigned via plugin but there is extaction to add prefix
# timestamp value will be assigned via event
# modinput input type is used to ingest the data into splunk
# Total test cases: 3
# 2 _time Passed
# 1 line_breaker Passed
[modinput_host_prefix.sample]
interval = 60
earliest = -60s
latest = now
source = pytest-splunk-addon:modinput
sourcetype = test:indextime:modinput_host_prefix
input_type = modinput
host_type = plugin
host_prefix = test-
sourcetype_to_search = test:indextime:modinput_host_prefix
timestamp_type = event
sample_count = 1

token.0.token = (\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2})
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%d %H:%M:%S
token.0.field = _time

token.1.token = ##host_token##
token.1.replacementType = random
token.1.replacement = host['host']

# Host_prefix value should be added when plugin make search query
# Host values will be assigned via events but there is extaction to add prefix
# timestamp value will be assigned via event
# file_monitor input type is used to ingest the data into splunk
# Total test cases: 3
# 1 key_fields Passed
# 1 _time Passed
# 1 line_breaker Passed
[file_monitor_host_prefix.sample]
interval = 60
earliest = -60s
latest = now
source = pytest-splunk-addon:file_monitor
sourcetype = test:indextime:file_monitor_host_prefix
input_type = file_monitor
host_type = event
host_prefix = test-
sourcetype_to_search = test:indextime:file_monitor_host_prefix
timestamp_type = event
sample_count = 2

token.0.token = (\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2})
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%d %H:%M:%S
token.0.field = _time

token.1.token = ##host_token##
token.1.replacementType = random
token.1.replacement = host['host']
token.1.field = host

# Covers almost all the rules supported by pytest-splunk-addon plugin with a custom index
# host will be assigned via plugin
# timestamp value will be assigned based on the it is present events
# file monitoring input type is used to ingest the data in splunk
# also covers the scenario for tokenizing the samples through the lookup files
# index will be setup by TA-fiction's indexes.conf file
# Total test cases: 13
# 6 key_fields are Passed
# 6 _time Passed
# 1 line_breaker Passed
[test_index.samples]
sourcetype = test:indextime:test_pytest_splunk_addon_index_raw
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:test_pytest_splunk_addon_index_raw
sample_count = 2
timestamp_type = event
index = test_pytest_splunk_addon_index_raw

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time

token.1.token = ##token_list_all##
token.1.replacementType = all
token.1.replacement = list["a","b"]

token.2.token = ##token_src_ipv6##
token.2.replacementType = random
token.2.replacement = src["ipv6"]

token.3.token = ##token_static_field##
token.3.replacementType = static
token.3.replacement = sample_value

token.4.token = ##token_src_port##
token.4.replacementType = random
token.4.replacement = src_port
token.4.field = src_port

token.5.token = ##token_dest_port##
token.5.replacementType = random
token.5.replacement = dest_port
token.5.field = dest_port

token.6.token = ##token_dvc_ipv4##
token.6.replacementType = random
token.6.replacement = dvc["ipv4"]
token.6.field = dvc

token.7.token = ##token_user_name##
token.7.replacementType = random
token.7.replacement = user["name"]
token.7.field = user

token.8.token = ##token_user_email##
token.8.replacementType = random
token.8.replacement = user["email"]

token.9.token = ##token_user_domain_user##
token.9.replacementType = random
token.9.replacement = user["domain_user"]

token.10.token = ##token_user_distinquised_name##
token.10.replacementType = random
token.10.replacement = user["distinquised_name"]

token.11.token = ##token_host_ipv4##
token.11.replacementType = random
token.11.replacement = host["ipv4"]

token.12.token = ##token_host_ipv6##
token.12.replacementType = random
token.12.replacement = host["ipv6"]

token.13.token = ##token_host_host##
token.13.replacementType = random
token.13.replacement = host["host"]

token.14.token = ##token_host_fqdn##
token.14.replacementType = random
token.14.replacement = host["fqdn"]

token.15.token = ##token_hex##
token.15.replacementType = random
token.15.replacement = hex(20)

token.16.token = ##token_ipv4##
token.16.replacementType = random
token.16.replacement = ipv4

token.17.token = ##token_ipv6##
token.17.replacementType = random
token.17.replacement = ipv6

token.18.token = ##token_list_random##
token.18.replacementType = random
token.18.replacement = list["one","two","three"]

token.19.token = ##token_int_all##
token.19.replacementType = all
token.19.replacement = integer[21:24]

token.20.token = ##token_email##
token.20.replacementType = random
token.20.replacement = email

token.21.token = ##token_mac##
token.21.replacementType = random
token.21.replacement = mac

token.22.token = ##token_float##
token.22.replacementType = random
token.22.replacement = float[1.0:5.0]

token.23.token = ##token_guid##
token.23.replacementType = random
token.23.replacement = guid

token.24.token = ##token_src_host##
token.24.replacementType = random
token.24.replacement = src["host"]

token.25.token = ##token_src_fqdn##
token.25.replacementType = random
token.25.replacement = src["fqdn"]

token.26.token = ##token_dest_ipv6##
token.26.replacementType = random
token.26.replacement = dest["ipv6"]

token.27.token = ##token_dest_host##
token.27.replacementType = random
token.27.replacement = dest["host"]

token.28.token = ##token_dest_fqdn##
token.28.replacementType = random
token.28.replacement = dest["fqdn"]

token.29.token = ##token_dvc_ipv6##
token.29.replacementType = random
token.29.replacement = dvc["ipv6"]

token.30.token = ##token_dvc_host##
token.30.replacementType = random
token.30.replacement = dvc["host"]

token.31.token = ##token_dvc_fqdn##
token.31.replacementType = random
token.31.replacement = dvc["fqdn"]

token.32.token = ##token_int_random##
token.32.replacementType = random
token.32.replacement = integer[1:20]

token.33.token = ##token_dest_ipv4##
token.33.replacementType = random
token.33.replacement = dest["ipv4"]
token.33.field = dest

token.34.token = ##token_src_ipv4##
token.34.replacementType = random
token.34.replacement = src["ipv4"]
token.34.field = src

token.35.token = ##token_file_random##
token.35.replacementType = random
token.35.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/samples/random_file.sample]

token.36.token = ##token_file_all##
token.36.replacementType = all
token.36.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/samples/all_file.sample]

token.37.token = ##token_url_ip_host##
token.37.replacementType = random
token.37.replacement = url["ip_host"]

token.38.token = ##token_url_fqdn_host##
token.38.replacementType = random
token.38.replacement = url["fqdn_host"]

token.39.token = ##token_url_path##
token.39.replacementType = random
token.39.replacement = url["path"]

token.40.token = ##token_url_query##
token.40.replacementType = random
token.40.replacement = url["query"]

token.41.token = ##token_url_protocol##
token.41.replacementType = random
token.41.replacement = url["protocol"]

token.42.token = ##token_url_full##
token.42.replacementType = random
token.42.replacement = url["full"]

token.43.token = ##token_lookup##
token.43.replacementType = random
token.43.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/lookups/sample_lookup.csv:input]

token.44.token = ##token_lookup_op##
token.44.replacementType = random
token.44.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/lookups/sample_lookup.csv:output]

token.45.token = ##int_negative##
token.45.replacementType = random
token.45.replacement = integer[-2:0]

token.46.token = ##float_negative##
token.46.replacementType = random
token.46.replacement = float[-2.0:-1.0]

# modinput input type is used to ingest the data into splunk (will ingest one event at a time)
# Using modinput to test HECEventIngestor input
# Total test cases: 1
# 1 line_breaker passed
[test_index_HECEventIngestor.samples]
sourcetype = test:indextime:test_index_HECEventIngestor
sourcetype_to_search = test:indextime:test_index_HECEventIngestor
host_type = plugin
input_type = modinput
source = pytest-splunk-addon:modinput
timestamp_type = plugin
index = test_pytest_splunk_addon_index_event

token.0.token = ##static_value_1##
token.0.replacementType = static
token.0.replacement = sample_value_1

# Using uf file monitor to ingest data
# Total test cases: 1
# 2 key_fields passed
# 1 line_breaker passed
[uf_file_monitor_host_event.sample]
sourcetype = test:indextime:uf_file_monitor_host_event
sourcetype_to_search = test:indextime:uf_file_monitor_host_event
host_type = event
input_type = uf_file_monitor
source = pytest-splunk-addon:uf_file_monitor
timestamp_type = plugin
sample_count = 2

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S

token.1.token = ##host_token##
token.1.replacementType = random
token.1.replacement = host['host']
token.1.field = host

token.2.token = ##token_list_all##
token.2.replacementType = all
token.2.replacement = list["a","b"]

# Using uf file monitor to ingest data
# Host type is event, so file_monitor_ingestor will add host field in inputs stanza
# 2 _time passed
# 1 line_breaker passed
[uf_file_monitor_host_plugin.sample]
sourcetype = test:indextime:uf_file_monitor_host_plugin
sourcetype_to_search = test:indextime:uf_file_monitor_host_plugin
host_type = plugin
input_type = uf_file_monitor
source = pytest-splunk-addon:uf_file_monitor
timestamp_type = event
sample_count = 2

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time

token.1.token = ##host_token##
token.1.replacementType = random
token.1.replacement = host['host']

token.2.token = ##token_list_all##
token.2.replacementType = all
token.2.replacement = list["a","b"]

# Renaming sourcetype, adding source in sourcetype to test source value getting extracted properly
# 2 _time passed
# 1 line_breaker passed
[uf_file_monitor_rename_sourcetype.sample]
sourcetype = test:indextime:uf_file_monitor_rename_sourcetype
sourcetype_to_search = test:indextime:uf_file_monitor_rename_sourcetype:source
host_type = plugin
input_type = uf_file_monitor
source = source.log
timestamp_type = event
sample_count = 2

token.1.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.1.replacementType = timestamp
token.1.replacement = %s
token.1.field = _time

token.2.token = ##host_token##
token.2.replacementType = random
token.2.replacement = host['host']

token.3.token = ##token_list_all##
token.3.replacementType = all
token.3.replacement = list["a","b"]

# Test INDEXED_EXTRATION field
# src, src_port, dest, dest_port fields should be extracted at indextime
# Total test cases: 3
# 1 key_fields are Passed
# 1 _time Passed
# 1 line_breaker Passed
[uf_file_monitor_indexed_extraction.sample]
sourcetype = test:indextime:uf_file_monitor_indexed_extraction
sourcetype_to_search = test:indextime:uf_file_monitor_indexed_extraction
host_type = plugin
input_type = uf_file_monitor
source = pytest-splunk-addon:uf_file_monitor
timestamp_type = event
sample_count = 2

token.0.token = \d{10}.\d{6}
token.0.replacementType = timestamp
token.0.replacement = %s
token.0.field = _time

token.1.token = (##SRC##)
token.1.replacementType = random
token.1.replacement = src['ipv4']
token.1.field = src

token.2.token = (##SRC_PORT##)
token.2.replacementType = random
token.2.replacement = src_port
token.2.field = src_port

token.3.token = (##DEST##)
token.3.replacementType = random
token.3.replacement = dest['ipv4']
token.3.field = dest

token.4.token = (##DEST_PORT##)
token.4.replacementType = random
token.4.replacement = dest_port
token.4.field = dest_port