##Total Tests
##53
##Passed 30
##Failed 23
##Skipped 6

##Search Time Tests
##3 Passed
##6 Skipped

##Common Test
##1 Failed (Find untokenised values in events)

##This should fail:
##breaking configuration is wrong (line breaker should break)
##Total 5 Tests
##2 Keyfields Passed
##2 _time Failed
##1 Line_Breaker Failed
[scripted_input_line_breaking.samples]
sourcetype = test:indextime:scripted_input_line_breaking
host_type = plugin
input_type = scripted_input
source = pytest-splunk-addon:scripted_input
sourcetype_to_search = test:indextime:scripted_input_line_breaking
sample_count = 2
earliest = -60m
timestamp_type = event

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%SZ
token.0.field=_time

token.1.token = ##token_list_all##
token.1.replacementType = all
token.1.replacement = list["a","b"]

token.2.token = ##token_src_port##
token.2.replacementType = random
token.2.replacement = src_port
token.2.field = src_port

token.3.token = ##token_dest_port##
token.3.replacementType = random
token.3.replacement = dest_port
token.3.field = dest_port

token.4.token = ##token_dest_ipv4##
token.4.replacementType = random
token.4.replacement = dest["ipv4"]
token.4.field = dest

token.5.token = ##token_src_ipv4##
token.5.replacementType = random
token.5.replacement = src["ipv4"]
token.5.field = src

token.6.token = (\d{2}-\d{2}-\d{4}T\d{2}:\d{2}:\d{2})
token.6.replacementType = timestamp
token.6.replacement = %d-%m-%YT%H:%M:%S

##This should fail:
##_time: wrong field is assigned _time
##key_fields: src values should mismatch while dest is not available
##Total 3 Tests
##1 Keyfields Failed
##1 _time Failed
##1 Line_Breaker Passed
[scripted_input_key_fields.samples]
sourcetype = test:indextime:scripted_input_key_fields
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:scripted_input_key_fields
sample_count = 2
earliest = -60m
timestamp_type = event

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%SZ
token.0.field=_time

token.1.token = ##token_list##
token.1.replacementType = random
token.1.replacement = list["a","b"]

token.2.token = ##token_src_port##
token.2.replacementType = random
token.2.replacement = src_port
token.2.field = src_port

token.3.token = ##token_dest_port##
token.3.replacementType = random
token.3.replacement = dest_port
token.3.field = dest_port

token.4.token = ##token_dest_ipv4##
token.4.replacementType = random
token.4.replacement = dest["ipv4"]
token.4.field = dest

token.5.token = ##token_src_ipv4##
token.5.replacementType = random
token.5.replacement = src["ipv4"]
token.5.field = src

token.6.token = (\d{2}-\d{2}-\d{4}T\d{2}:\d{2}:\d{2})
token.6.replacementType = timestamp
token.6.replacement = %Y-%m-%dT%H:%M:%SZ


##To validate that plugin does not throw an error when
##timestamp_type=event but token.n.field = _time not provided
##count param provided but is not used
##Total 2 Tests
##1 _time Failed
##1 Line_Breaker Passed
[no_time_provided_when_type_event.samples]
sourcetype = test:indextime:no_time_provided_when_type_event
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:no_time_provided_when_type_event
sample_count = 2
timestamp_type = event
count=240

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%SZ

token.1.token = ##host_value##
token.1.replacementType = random
token.1.replacement = host['host']

token.2.token = ##any_token##
token.2.replacementType = static
token.2.replacement = any_value

##To validate that plugin does not throw an error when
##host_type=event but token.n.field = host not provided
##count param provided but is not used
##Total 2 Tests
##1 _time Failed
##1 Line_Breaker Failed
[no_host_provided_when_type_event.samples]
sourcetype = test:indextime:no_host_provided_when_type_event
host_type = event
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:no_host_provided_when_type_event
sample_count = 2
timestamp_type = event
count=240

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%SZ
token.0.field = _time

token.1.token = ##host_value##
token.1.replacementType = random
token.1.replacement = host['host']

token.2.token = ##any_token##
token.2.replacementType = static
token.2.replacement = any_value


##This should fail:
##expected_event_count configuration is wrong
##_time is assigned in a incorrect field
##key_field src is provided which is not present in this samples
##Total 5 Tests
##2 Keyfields Failed
##2 _time Failed
##1 Line_Breaker Failed
[failing.samples]
sourcetype = test:indextime:failing
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:failing
sample_count = 1
earliest = -60m
timestamp_type = event

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%SZ

token.1.token = ##token_list_all##
token.1.replacementType = all
token.1.replacement = list["a","b"]

token.2.token = ##token_src_port##
token.2.replacementType = random
token.2.replacement = src_port
token.2.field = src_port

token.3.token = ##token_dest_port##
token.3.replacementType = random
token.3.replacement = dest_port
token.3.field = dest_port

token.4.token = ##token_dvc_ipv4##
token.4.replacementType = random
token.4.replacement = dvc["ipv4"]
token.4.field = dvc

token.5.token = ##token_user_name##
token.5.replacementType = random
token.5.replacement = user["name"]
token.5.field = user

token.6.token = ##token_email##
token.6.replacementType = random
token.6.replacement = email

token.7.token = ##token_dest_ipv4##
token.7.replacementType = random
token.7.replacement = dest["ipv4"]
token.7.field = dest

token.8.token = ##token_src_ipv4##
token.8.replacementType = random
token.8.replacement = src["ipv4"]
token.8.field = src

token.9.token = (\d{2}-\d{2}-\d{4}T\d{2}:\d{2}:\d{2})
token.9.replacementType = timestamp
token.9.replacement = %d-%m-%YT%H:%M:%S
token.9.field=_time


##To validate that:
##when timestamp_type=plugin no test for _time generates
##wrong regex match does not replace token
##Total 1 Tests
##1 Line_Breaker Passed
[regex_that_does_not_match.samples]
sourcetype = test:indextime:regex_that_does_not_match
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:regex_that_does_not_match
sample_count = 2
timestamp_type = plugin

token.0.token = (\d{4}-\d{2}-\d{2}\d{2}:\d{2}:\d{2}\.\d+Z)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%SZ

token.1.token = ##host_value##
token.1.replacementType = random
token.1.replacement = host['host']

token.2.token = ##any_token##
token.2.replacementType = static
token.2.replacement = any_value

token.3.token = this is wrong_regxx=(##\w+##)
token.3.replacementType = static
token.3.replacement = replace_no

token.4.token = this is correct_regex=(##\w+##)
token.4.replacementType = static
token.4.replacement = replace_yes

## This sample file does not exist, It should raise a warning but should not affect the indextime testing.
##Total Tests 0
[sample_file_does_not_exist.samples]
sourcetype = test:indextime:sample_file_does_not_exist
host_type = plugin
input_type = default
source = pytest-splunk-addon:default
sourcetype_to_search = test:indextime:sample_file_does_not_exist
sample_count = 1
timestamp_type = event

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time


## This sample file is empty, It should raise a warning but should not affect the indextime testing.
##Total Tests 0
[this_file_is_empty.samples]
sourcetype = test:indextime:this_file_is_empty
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:this_file_is_empty
sample_count = 1
timestamp_type = event

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time


## Empty line at the end of sample file, It should not affect indextime testing plugin should ignore this.
##Total Tests 3
##2 _time Passed
##1 Line_Breaker Passed
[token_not_in_sample.samples]
sourcetype = test:indextime:token_not_in_sample
host_type = plugin
input_type = modinput
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:token_not_in_sample
sample_count = 2
timestamp_type = event
timezone = 0000

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time

token.1.token = ##token_static_field##
token.1.replacementType = static
token.1.replacement = token_static_field

## This token does not exist, It should raise a warning but should not affect indextime testing plugin should ignore this.
token.2.token = ##token_not_in_sample##
token.2.replacementType = static
token.2.replacement = token_not_in_sample


## Testcase test_hash_indextime will fail for this scenario.
##Total Tests 2
##1 _time Passed
##1 Line_Breaker Passed
[token_not_in_stanza.samples]
sourcetype = test:indextime:token_not_in_stanza
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:token_not_in_stanza
sample_count = 2
timestamp_type = event

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time


## Empty line at the end of sample file, It should not affect indextime testing plugin should ignore this.
##Total Tests 9
##4 Keyfields Passed
##4 _time Passed
##1 Line_Breaker Passed
[skip_token_or_empty_line.samples]
sourcetype = test:indextime:sourcetype:skip_token_or_empty_line
host_type = plugin
input_type = modinput
earliest = -45m
latest = -15m
source = pytest-splunk-addon:modinput
sourcetype_to_search = test:indextime:sourcetype:skip_token_or_empty_line
sample_count = 4
timestamp_type = event

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time

token.1.token = ##token_user_name##
token.1.replacementType = random
token.1.replacement = user["name"]
token.1.field = user

#token.2.token = ##token_file_all_dependent##
#token.2.replacementType = mvfile
#token.2.replacement = $SPLUNK_HOME/etc/apps/TA_fiction_indextime/samples/dependent_file.sample:1

token.3.token = @@tokenemail
token.3.replacementType = random
token.3.replacement = email

#token.4.token = ##token_file_random_dependent##
#token.4.replacementType = mvfile
#token.4.replacement = $SPLUNK_HOME/etc/apps/TA_fiction_indextime/samples/dependent_file.sample:2

## In this stanza every value for metadata and rule is intentionally provided wrong to raise a warning
## It should not affect indextime testing plugin should ignore this
##Total Tests 2
##1 Keyfields Passed
##1 Line_Breaker Passed
[wrong_values.samples]
sourcetype = test:indextime:sourcetype:wrong_values
sourcetype_to_search = test:indextime:sourcetype:wrong_values
host_type = wrong
input_type = wrong
sample_count = wrong
timestamp_type = wrong
earliest = wrong
latest = wrong
timezone = wrong

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time

token.1.token = ##int_wrong##
token.1.replacementType = random
token.1.replacement = integer[1:5n]

token.2.token = ##token_user_name##
token.2.replacementType = random
token.2.replacement = user["namex"]
token.2.field = user

token.3.token = ##user_no_all##
token.3.replacementType = all
token.3.replacement = user["email"]
token.3.field = user

token.4.token = ##no_rule##
token.4.replacementType = random
token.4.replacement = wrong_rule

token.5.token = ##token_incorrect_url##
token.5.replacementType = random
token.5.replacement = url["wrong"]

token.6.token = ##float_wrong##
token.6.replacementType = random
token.6.replacement = float[1.00:5.00n]

token.7.token = ##list_wrong##
token.7.replacementType = random
token.7.replacement = list

token.8.token = ##url_wrong##
token.8.replacementType = random
token.8.replacement = url[]

token.9.token = ##src1##
token.9.replacementType = random
token.9.replacement = src

token.10.token = ##src2##
token.10.replacementType = random
token.10.replacement = dest[]

token.11.token = ##src3##
token.11.replacementType = random
token.11.replacement = dvc["asda"]

token.12.token = ##src4##
token.12.replacementType = random
token.12.replacement = host[""]

token.13.token = ##hex_wrong##
token.13.replacementType = random
token.13.replacement = hex(123

token.14.token = ##wrong_rt##
token.14.replacementType = wrong
token.14.replacement = hex(123)

token.15.token = ##hex_non_numeric##
token.15.replacementType = random
token.15.replacement = hex(abc)

## In this stanza the value of timezone is provided to make mismatch with timezone of splunk instance
## Total tests: 2
## 1 _time Failed
## 1 _line_breaker Passed
[wrong_timezone.samples]
sourcetype = test:indextime:wrong_timezone
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:wrong_timezone
expected_event_count = 2
timestamp_type = event
timezone = +0530

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time

## In this stanza, token rules are intentionally provided wrong to raise the warnings
## Total Tests 3
## 1 key_fields passed
## 1 Time Passed
## 1 Line_Breaker Passed
[wrong_sc4s_tokens.sample]
timestamp_type = event 
sourcetype = mcafee:epo:syslog
host_type = plugin
input_type = syslog_tcp
source =  mcafee_agent
sourcetype_to_search = mcafee:epo:syslog
sample_count = 1

token.0.token = ##TimeStamp##
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S.0Z
token.0.field = _time

token.1.token = ##HostName##
token.1.replacementType = random
token.1.replacement = host['host']
token.1.field = host

token.2.token = ##GUID##
token.2.replacementType = random
token.2.replacement = guid

token.3.token = ##WrongInt##
token.3.replacementType = random
token.3.replacement = integer[1:5n]

token.4.token = ##WrongReplacementType##
token.4.replacementType = wrong
token.4.replacement = src_port

token.5.token = ##WrongReplacement##
token.5.replacementType = random
token.5.replacement = wrong

token.6.token = ##WrongSrc##
token.6.replacementType = random
token.6.replacement = src["wrong"]

token.7.token = ##WrongDest##
token.7.replacementType = random
token.7.replacement = dest[""]

token.8.token = ##wrongHex##
token.8.replacementType = random
token.8.replacement = hex

token.9.token = ##WrongHost##
token.9.replacementType = random
token.9.replacement = host["None"]

token.10.token = ##WrongUrl##
token.10.replacementType = random
token.10.replacement = url("full")

token.11.token = ##WrongFloat##
token.11.replacementType = random
token.11.replacement = float[1.0-3.0]

token.12.token = ##WrongFile##
token.12.replacementType = random
token.12.replacement = file["not found"] 


##In this stanza no tokens are there so no tokenization will take place
##Here wrong line breaker is provided
##key_fields testcase -skip
##_time testcase -skip
##1 line_breaker testcase -fail
[wrong_line_breaker_file_monitor.samples]
sourcetype = test:indextime:wrong_line_breaker_file_monitor
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:wrong_line_breaker_file_monitor
sample_count = 2
timestamp_type = plugin
breaker = Timezone=\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z


##In this stanza no tokens are there so no tokenization will take place
##Here right line breaker is provided
##key_fields testcase -skip
##_time testcase -skip
##1 line_breaker testcase -pass
[wrong_line_breaker_file_monitor_fail.samples]
sourcetype = test:indextime:wrong_line_breaker_file_monitor_fail
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:wrong_line_breaker_file_monitor_fail
sample_count = 2
timestamp_type = plugin
breaker = Timezone1=\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z


##Here wrong line breaker is provided
##key_fields testcase -skip
##1 _time - fail
##1 line_breaker testcase -pass
[wrong_line_breaker_modinput.samples]
sourcetype = test:indextime:wrong_line_breaker_modinput
host_type = plugin
input_type = modinput
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:wrong_line_breaker_modinput
sample_count = 1
timestamp_type = event
breaker = Timezone=\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%SZ
token.0.field=_time

# Extraction is written but host_prefix is not added
# Total test cases: 3
# 2 _time Failed
# 1 line_breaker Failed
[no_prefix_stanza_modinput.sample]
interval = 60
earliest = -60s
latest = now
source = pytest-splunk-addon:modinput
sourcetype = test:indextime:no_prefix_stanza_modinput
input_type = modinput
host_type = plugin
sourcetype_to_search = test:indextime:no_prefix_stanza_modinput
timestamp_type = event
sample_count = 1

token.0.token = (\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2})
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%d %H:%M:%S
token.0.field = _time

token.1.token = ##host_token##
token.1.replacementType = random
token.1.replacement = host['host']

# Extraction is written but host_prefix is wrong
# Total test cases: 3
# 1 key_fields Failed
# 1 _time Failed
# 1 line_breaker Failed
[wrong_prefix_filemonitor.sample]
interval = 60
earliest = -60s
latest = now
source = pytest-splunk-addon:file_monitor
sourcetype = test:indextime:file_monitor_host_prefix
input_type = file_monitor
host_type = event
host_prefix = test1-
sourcetype_to_search = test:indextime:file_monitor_host_prefix
timestamp_type = event
sample_count = 2

token.0.token = (\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2})
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%d %H:%M:%S
token.0.field = _time

token.1.token = ##host_token##
token.1.replacementType = random
token.1.replacement = host['host']
token.1.field = host

##This should fail:
##Utilizing the wrong or unconfigured index
# Total test cases: 13
# 6 key_fields are passed
# 6 _time Passed
# 1 line_breaker Failed
[test_index_wrong.samples]
sourcetype = test:indextime:pytest_splunk_addon_index_wrong
host_type = plugin
input_type = file_monitor
source = pytest-splunk-addon:file_monitor
sourcetype_to_search = test:indextime:pytest_splunk_addon_index_wrong
sample_count = 2
timestamp_type = event
index = pytest_splunk_addon_index_wrong

token.0.token = (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+)
token.0.replacementType = timestamp
token.0.replacement = %Y-%m-%dT%H:%M:%S
token.0.field = _time

token.1.token = ##token_list_all##
token.1.replacementType = all
token.1.replacement = list["a","b"]

token.2.token = ##token_src_ipv6##
token.2.replacementType = random
token.2.replacement = src["ipv6"]

token.3.token = ##token_static_field##
token.3.replacementType = static
token.3.replacement = sample_value

token.4.token = ##token_src_port##
token.4.replacementType = random
token.4.replacement = src_port
token.4.field = src_port

token.5.token = ##token_dest_port##
token.5.replacementType = random
token.5.replacement = dest_port
token.5.field = dest_port

token.6.token = ##token_dvc_ipv4##
token.6.replacementType = random
token.6.replacement = dvc["ipv4"]
token.6.field = dvc

token.7.token = ##token_user_name##
token.7.replacementType = random
token.7.replacement = user["name"]
token.7.field = user

token.8.token = ##token_user_email##
token.8.replacementType = random
token.8.replacement = user["email"]

token.9.token = ##token_user_domain_user##
token.9.replacementType = random
token.9.replacement = user["domain_user"]

token.10.token = ##token_user_distinquised_name##
token.10.replacementType = random
token.10.replacement = user["distinquised_name"]

token.11.token = ##token_host_ipv4##
token.11.replacementType = random
token.11.replacement = host["ipv4"]

token.12.token = ##token_host_ipv6##
token.12.replacementType = random
token.12.replacement = host["ipv6"]

token.13.token = ##token_host_host##
token.13.replacementType = random
token.13.replacement = host["host"]

token.14.token = ##token_host_fqdn##
token.14.replacementType = random
token.14.replacement = host["fqdn"]

token.15.token = ##token_hex##
token.15.replacementType = random
token.15.replacement = hex(20)

token.16.token = ##token_ipv4##
token.16.replacementType = random
token.16.replacement = ipv4

token.17.token = ##token_ipv6##
token.17.replacementType = random
token.17.replacement = ipv6

token.18.token = ##token_list_random##
token.18.replacementType = random
token.18.replacement = list["one","two","three"]

token.19.token = ##token_int_all##
token.19.replacementType = all
token.19.replacement = integer[21:24]

token.20.token = ##token_email##
token.20.replacementType = random
token.20.replacement = email

token.21.token = ##token_mac##
token.21.replacementType = random
token.21.replacement = mac

token.22.token = ##token_float##
token.22.replacementType = random
token.22.replacement = float[1.0:5.0]

token.23.token = ##token_guid##
token.23.replacementType = random
token.23.replacement = guid

token.24.token = ##token_src_host##
token.24.replacementType = random
token.24.replacement = src["host"]

token.25.token = ##token_src_fqdn##
token.25.replacementType = random
token.25.replacement = src["fqdn"]

token.26.token = ##token_dest_ipv6##
token.26.replacementType = random
token.26.replacement = dest["ipv6"]

token.27.token = ##token_dest_host##
token.27.replacementType = random
token.27.replacement = dest["host"]

token.28.token = ##token_dest_fqdn##
token.28.replacementType = random
token.28.replacement = dest["fqdn"]

token.29.token = ##token_dvc_ipv6##
token.29.replacementType = random
token.29.replacement = dvc["ipv6"]

token.30.token = ##token_dvc_host##
token.30.replacementType = random
token.30.replacement = dvc["host"]

token.31.token = ##token_dvc_fqdn##
token.31.replacementType = random
token.31.replacement = dvc["fqdn"]

token.32.token = ##token_int_random##
token.32.replacementType = random
token.32.replacement = integer[1:20]

token.33.token = ##token_dest_ipv4##
token.33.replacementType = random
token.33.replacement = dest["ipv4"]
token.33.field = dest

token.34.token = ##token_src_ipv4##
token.34.replacementType = random
token.34.replacement = src["ipv4"]
token.34.field = src

token.35.token = ##token_url_ip_host##
token.35.replacementType = random
token.35.replacement = url["ip_host"]

token.36.token = ##token_url_fqdn_host##
token.36.replacementType = random
token.36.replacement = url["fqdn_host"]

token.37.token = ##token_url_path##
token.37.replacementType = random
token.37.replacement = url["path"]

token.38.token = ##token_url_query##
token.38.replacementType = random
token.38.replacement = url["query"]

token.39.token = ##token_url_protocol##
token.39.replacementType = random
token.39.replacement = url["protocol"]

token.40.token = ##token_url_full##
token.40.replacementType = random
token.40.replacement = url["full"]

token.41.token = ##token_lookup##
token.41.replacementType = random
token.41.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/lookups/sample_lookup.csv:input]

token.42.token = ##token_lookup_op##
token.42.replacementType = random
token.42.replacement = file[$SPLUNK_HOME/etc/apps/TA_fiction_indextime/lookups/sample_lookup.csv:output]

token.43.token = ##int_negative##
token.43.replacementType = random
token.43.replacement = integer[-2:0]

token.44.token = ##float_negative##
token.44.replacementType = random
token.44.replacement = float[-2.0:-1.0]

# modinput input type is used to ingest the data into splunk (will ingest one event at a time)
# Using modinput to test HECEventIngestor input
# Total test cases: 1
# 1 line_breaker failed
[test_index_HECEventIngestor_wrong.samples]
sourcetype = test:indextime:test_index_HECEventIngestor_wrong
sourcetype_to_search = test:indextime:test_index_HECEventIngestor_wrong
host_type = plugin
input_type = modinput
source = pytest-splunk-addon:modinput
timestamp_type = plugin
index = test_index_HECEventIngestor_wrong

token.0.token = ##static_value_1##
token.0.replacementType = static
token.0.replacement = sample_value_1