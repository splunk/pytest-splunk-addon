{
  "model_name": "Network_Traffic",
  "version": "1.0.0",
  "objects": [
    {
      "name": "All_Traffic",
      "tags": [["network", "communicate"]],
      "fields_cluster": [
        ["bytes", "bytes_in", "bytes_out"],
        ["dest_translated_ip", "src_translated_ip"],
        ["dest_zone", "src_zone"],
        ["icmp_type", "icmp_code"],
        ["packets", "packets_in", "packets_out"]
      ],
      "fields": [
        {
          "name": "action",
          "type": "required",
          "expected_values": ["allowed", "blocked", "teardown", "flow"],
          "comment": "The action taken by the network device."
        },
        {
          "name": "app",
          "type": "required",
          "comment": "The application protocol of the traffic."
        },
        {
          "name": "bytes",
          "type": "required",
          "validity": "if(isnum(bytes) and bytes==(bytes_in+bytes_out),bytes,null())",
          "comment": "Total count of bytes handled by this device/interface (bytes_in + bytes_out)."
        },
        {
          "name": "bytes_in",
          "type": "required",
          "validity": "if(isnum(bytes_in),bytes_in,null())",
          "comment": "How many bytes this device/interface received."
        },
        {
          "name": "bytes_out",
          "type": "required",
          "validity": "if(isnum(bytes_out),bytes_out,null())",
          "comment": "How many bytes this device/interface transmitted."
        },
        {
          "name": "channel",
          "type": "not_allowed_in_search",
          "comment": "The 802.11 channel used by a wireless network."
        },
        {
          "name": "dest",
          "type": "required",
          "validity": "case((protocol==\"ip\" OR protocol==\"icmp\"), if(match(dest,\"(?:[0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.|$)){4}\"), dest, null()), match(dest,\"^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$\"), dest, true(), null())",
          "comment": "The destination of the network traffic (the remote host). You can alias this from more specific fields, such as dest_host, dest_ip, or dest_name."
        },
        {
          "name": "dest_interface",
          "type": "optional",
          "comment": "The interface that is listening remotely or receiving packets locally. Can also be referred to as the 'egress interface.'"
        },
        {
          "name": "dest_ip",
          "type": "conditional",
          "condition": "| regex dest=\"(?:[0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.|$)){4}\"",
          "validity": "if(dest_ip==dest,dest_ip,null())",
          "comment": "The IP address of the destination."
        },
        {
          "name": "dest_mac",
          "type": "conditional",
          "condition": "| regex dest=\"^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$\"",
          "validity": "if(dest==dest_mac,dest_mac,null())",
          "comment": "The destination TCP/IP layer 2 Media Access Control (MAC) address of a packet's destination, such as 06:10:9f:eb:8f:14. Note: Always force lower case on this field and use colons instead of dashes, spaces, or no separator."
        },
        {
          "name": "dest_port",
          "type": "conditional",
          "condition": "transport=tcp OR transport=udp",
          "validity": "if(isnum(dest_port),dest_port,null())",
          "comment": "The destination port of the network traffic. Note: Do not translate the value of this field to a string (tcp/80 is 80, not http). You can set up the corresponding string value in the dest_svc field."
        },
        {
          "name": "dest_translated_ip",
          "type": "conditional",
          "condition": "protocol=IP OR protocol=ICMP",
          "comment": "The NATed IPv4 or IPv6 address to which a packet has been sent."
        },
        {
          "name": "dest_translated_port",
          "type": "conditional",
          "condition": "(transport=tcp OR transport=udp) AND dest_translated_ip=*",
          "comment": "The NATed port to which a packet has been sent. Note: Do not translate the values of this field to strings (tcp/80 is 80, not http)."
        },
        {
          "name": "dest_zone",
          "type": "required",
          "comment": "The network zone of the destination."
        },
        {
          "name": "direction",
          "type": "optional",
          "expected_values": ["inbound", "outbound"],
          "comment": "The direction the packet is traveling."
        },
        {
          "name": "duration",
          "type": "optional",
          "validity": "if(isnum(duration),duration,null())",
          "comment": "The amount of time for the completion of the network event, in seconds."
        },
        {
          "name": "dvc",
          "type": "required",
          "comment": "The device that reported the traffic event. You can alias this from more specific fields, such as dvc_host, dvc_ip, or dvc_name."
        },
        {
          "name": "dvc_mac",
          "type": "optional",
          "comment": "The device TCP/IP layer 2 Media Access Control (MAC) address of a packet's destination, such as 06:10:9f:eb:8f:14. Note: Always force lower case on this field and use colons instead of dashes, spaces, or no separator."
        },
        {
          "name": "dvc_zone",
          "type": "optional",
          "comment": "The network zone of the device."
        },
        {
          "name": "flow_id",
          "type": "optional",
          "comment": "Unique identifier for this traffic stream, such as a netflow, jflow, or cflow."
        },
        {
          "name": "icmp_code",
          "type": "conditional",
          "condition": "protocol=icmp",
          "validity": "if(isnum(icmp_code),icmp_code,null())",
          "comment": "The RFC 2780 or RFC 4443 human-readable code value of the traffic, such as Destination Unreachable or Parameter Problem . See the ICMP Type Numbers and the ICMPv6 Type Numbers."
        },
        {
          "name": "icmp_type",
          "type": "conditional",
          "condition": "protocol=icmp",
          "validity": "if(isnum(duration) and duration>0 and duration<254,duration,null())",
          "comment": "The RFC 2780 or RFC 4443 numeric value of the traffic. See the ICMP Type Numbers and the ICMPv6 Type Numbers."
        },
        {
          "name": "packets",
          "type": "conditional",
          "condition": "packets_in=* AND packets_out=*",
          "validity": "if(isnum(packets),packets,null())",
          "comment": "The total count of packets handled by this device/interface (packets_in + packets_out)."
        },
        {
          "name": "packets_in",
          "type": "conditional",
          "condition": "packets_out=*",
          "validity": "if(isnum(packets_in),packets_in,null())",
          "comment": "The total count of packets received by this device/interface."
        },
        {
          "name": "packets_out",
          "type": "conditional",
          "condition": "packets_in=*",
          "validity": "if(isnum(packets_out),packets_out,null())",
          "comment": "The total count of packets transmitted by this device/interface."
        },
        {
          "name": "protocol",
          "type": "conditional",
          "condition": "| where match(src, \"(?:[0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.|$)){4}\") or match(dest, \"(?:[0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.|$)){4}\")",
          "expected_values": ["ip", "icmp"],
          "comment": "The OSI layer 3 (network) protocol of the traffic observed, in lower case. For example, ip, appletalk, ipx."
        },
        {
          "name": "protocol_version",
          "type": "conditional",
          "condition": "protocol=ip",
          "expected_values": ["ipv4", "ipv6"],
          "comment": "Version of the OSI layer 3 protocol."
        },
        {
          "name": "response_time",
          "type": "optional",
          "validity": "if(isnum(response_time),response_time,null())",
          "comment": "The amount of time it took to receive a response in the network event, in seconds."
        },
        {
          "name": "rule",
          "type": "optional",
          "comment": "The rule which defines the action that was taken in the network event. Note: This is a string value. Use rule_id for rule fields that are integer data types. The rule_id field is optional, so it is not included in the data model"
        },
        {
          "name": "session_id",
          "type": "optional",
          "comment": "The session identifier. Multiple transactions build a session."
        },
        {
          "name": "src",
          "type": "required",
          "validity": "case((protocol==\"ip\" OR protocol==\"icmp\"), if(match(src,\"(?:[0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.|$)){4}\"), src, null()), match(src,\"^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$\"), src, true(), null())",
          "comment": "The source of the network traffic (the client requesting the connection). You can alias this from more specific fields, such as src_host, src_ip, or src_name.'"
        },
        {
          "name": "src_interface",
          "type": "optional",
          "comment": "The interface that is listening locally or sending packets remotely. Can also be referred to as the 'ingress interface.'"
        },
        {
          "name": "src_translated_ip",
          "type": "required",
          "comment": "The interface that is listening locally or sending packets remotely. Can also be referred to as the 'ingress interface.'"
        },
        {
          "name": "src_zone",
          "type": "required",
          "comment": "The network zone of the source."
        },
        {
          "name": "ssid",
          "type": "not_allowed_in_search",
          "comment": "The 802.11 service set identifier (ssid) assigned to a wireless session."
        },
        {
          "name": "wifi",
          "type": "not_allowed_in_search",
          "comment": "The wireless standard(s) in use, such as 802.11a, 802.11b, 802.11g, or 802.11n."
        },
        {
          "name": "tcp_flag",
          "type": "optional",
          "expected_values": ["SYN", "ACK", "FIN", "RST", "URG", "PSH"],
          "comment": "The TCP flag or multiple flags specified in the event."
        },
        {
          "name": "tos",
          "type": "optional",
          "comment": "The combination of source and destination IP ToS (type of service) values in the event."
        },
        {
          "name": "ttl",
          "type": "optional",
          "validity": "if(isnum(ttl),ttl,null())",
          "comment": "The 'time to live' of a packet or diagram, in seconds."
        },
        {
          "name": "user",
          "type": "optional",
          "comment": "The user that requested the traffic flow."
        },
        {
          "name": "vendor_product",
          "type": "optional",
          "comment": "The vendor and product of the device generating the network event. This field can be automatically populated by vendor and product fields in your data."
        },
        {
          "name": "vlan",
          "type": "optional",
          "comment": "The virtual local area network (VLAN) specified in the record."
        },
        {
          "name": "transport",
          "type": "required",
          "expected_values": ["tcp", "udp", "icmp"],
          "comment": "The OSI layer 4 (transport) protocol of the traffic observed, in lower case."
        },
        {
          "name": "src_ip",
          "type": "conditional",
          "condition": "| regex src=\"(?:[0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.|$)){4}\"",
          "validity": "if(src_ip==src,src_ip,null())",
          "comment": "The ip address of the source."
        },
        {
          "name": "src_mac",
          "type": "conditional",
          "condition": "| regex src=\"^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$\"",
          "validity": "if(src==src_mac,src_mac,null())",
          "comment": "The source TCP/IP layer 2 Media Access Control (MAC) address of a packet's destination, such as 06:10:9f:eb:8f:14. Note: Always force lower case on this field and use colons instead of dashes, spaces, or no separator."
        },
        {
          "name": "src_port",
          "type": "conditional",
          "condition": "transport=tcp OR transport=udp",
          "validity": "if(isnum(src_port),src_port,null())",
          "comment": "The source port of the network traffic. Note: Do not translate the value of this field to a string (tcp/80 is 80, not http). You can set up the corresponding string value in the src_svc field."
        },
        {
          "name": "src_translated_port",
          "type": "conditional",
          "condition": "(transport=tcp OR transport=udp) AND src_translated_ip=*",
          "validity": "if(isnum(src_translated_port),src_translated_port,null())",
          "comment": "The NATed port from which a packet has been sent. Note: Do not translate the values of this field to strings (tcp/80 is 80, not http."
        }
      ],
      "child_dataset": [
        {
          "name": "Traffic_By_Action",
          "tags": [["network", "communicate"]],
          "fields_cluster": [],
          "fields": [],
          "child_dataset": [],
          "search_constraints": "action=*"
        },
        {
          "name": "Allowed_Traffic",
          "tags": [["network", "communicate"]],
          "fields_cluster": [],
          "fields": [],
          "child_dataset": [],
          "search_constraints": "action=allowed"
        },
        {
          "name": "Blocked_Traffic",
          "tags": [["network", "communicate"]],
          "fields_cluster": [],
          "fields": [],
          "child_dataset": [],
          "search_constraints": "action=blocked"
        }
      ],
      "search_constraints": "tag=network tag=communicate"
    }
  ]
}
